"""
Django settings for PI_2 project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Removido valor padrão inseguro da SECRET_KEY
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    # Gera uma chave secreta aleatória apenas para desenvolvimento local
    # Em produção, SEMPRE use uma variável de ambiente
    import secrets
    SECRET_KEY = secrets.token_urlsafe(50)
    print("AVISO: Usando uma SECRET_KEY temporária. Em produção, defina a variável de ambiente DJANGO_SECRET_KEY.")

# SECURITY WARNING: don't run with debug turned on in production!
# Configuração de DEBUG mais segura, desativado por padrão em produção
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Lista de hosts permitidos mais segura
# Em produção, deve ser restrita aos domínios válidos
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'autoitaapp.azurewebsites.net,127.0.0.1,localhost').split(',')

# Configuração de origens confiáveis para CSRF
CSRF_TRUSTED_ORIGINS = [
    'https://autoitaapp.azurewebsites.net',
    'https://localhost:8001',
    'http://localhost:8001',
    'https://localhost:8000',
    'http://localhost:8000',
]

# Application definition

INSTALLED_APPS = [
    "app",
    "admin_interface",
    "colorfield",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # Adicionado para gerenciar CORS
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Para arquivos estáticos no Azure
    'corsheaders.middleware.CorsMiddleware',  # Adicionado para CORS - deve ficar antes do CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PI_2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['app/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PI_2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configuração de banco de dados baseada em variáveis de ambiente
database_engine = os.environ.get('DATABASE_ENGINE', 'sqlite').lower()

if database_engine == 'postgresql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DATABASE_NAME', 'dbpi'),
            'USER': os.environ.get('DATABASE_USER', 'postgres'),
            # Removida senha padrão do banco de dados
            'PASSWORD': os.environ.get('DATABASE_PASSWORD', ''),
            'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
            'PORT': os.environ.get('DATABASE_PORT', '5432'),
            'CONN_MAX_AGE': int(os.environ.get('DATABASE_CONN_MAX_AGE', '60')),  # Pooling de conexão
            'OPTIONS': {
                'sslmode': os.environ.get('DATABASE_SSL_MODE', 'prefer'),
            },
        }
    }
else:
    # Default para SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# Ativando validadores de senha para ambiente de produção
if not DEBUG:
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 8,
            }
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]
else:
    # Validadores simplificados para desenvolvimento
    AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Configuração de segurança de cookies
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False') == 'True'  # Requer HTTPS
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False') == 'True'  # Requer HTTPS
SESSION_COOKIE_HTTPONLY = True  # Impede acesso ao cookie via JavaScript
CSRF_COOKIE_HTTPONLY = True  # Impede acesso ao cookie via JavaScript
SECURE_BROWSER_XSS_FILTER = True  # Proteção contra XSS no navegador
SECURE_CONTENT_TYPE_NOSNIFF = True  # Evita sniffing de MIME types

# Força HTTPS em produção
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'

# HSTS para forçar clientes a se conectarem via HTTPS
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0'))  # 0 desativa, 31536000 é recomendado (1 ano)
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False') == 'True'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False') == 'True'

# Configuração para o REST Framework - Adicionando autenticação e permissões básicas
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Adicionando rate limiting para evitar abusos
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
}

# Configurações de CORS
if DEBUG:
    # Em desenvolvimento, permitimos origens mais amplas para facilitar o teste
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Em produção, restringimos as origens permitidas
    CORS_ALLOWED_ORIGINS = [
        "https://autoitaapp.azurewebsites.net",
        # Adicione outros domínios permitidos conforme necessário
    ]

# Configurações adicionais de segurança para CORS
CORS_ALLOW_CREDENTIALS = True  # Permite envio de cookies nas requisições CORS
CORS_PREFLIGHT_MAX_AGE = 86400  # Duração do cache da resposta preflight (24 horas)

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
